.cpp

KWD_CONT:
    #include    PURPLE GREEN \n
    #pragma     PURPLE BLUE  \n
    #define     PURPLE BLUE  \n
    #error      PURPLE BLUE  \n
    #warning    PURPLE BLUE  \n
    #undef      PURPLE BLUE  \n
    #if         PURPLE BLUE  \n
    #else       PURPLE BLUE  \n
    #elif       PURPLE BLUE  \n
    #endif      PURPLE BLUE  \n
    #ifdef      PURPLE BLUE  \n
    #ifndef     PURPLE BLUE  \n
    #line       PURPLE BLUE  \n
    
    int BLUE YELLOW     (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    float BLUE YELLOW   (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    double BLUE YELLOW  (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    short BLUE YELLOW   (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    char BLUE YELLOW    (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    void BLUE YELLOW    (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    long BLUE YELLOW    (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    bool BLUE YELLOW    (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    struct BLUE YELLOW  (, ;, =, ), &, \c, {, }, \n, [, ], >, <
    typename BLUE GREEN (, ;, =, ), &, \c, {, },[, ], >


KWD:
    alignas BLUE
    alignof BLUE
    and     BLUE
    and_eq  BLUE
    asm     PURPLE
    atomic_cancel   BLUE
    atomic_commit   BLUE
    atomic_noexcept BLUE
    auto    BLUE
    bitand  BLUE
    bitor   BLUE
    bool    BLUE
    break   PURPLE
    case    PURPLE
    catch   PURPLE
    class   BLUE
    compl   BLUE
    concept BLUE
    const     BLUE
    consteval BLUE
    constexpr BLUE
    constinit BLUE
    const_cast  BLUE
    continue PURPLE
    co_await PURPLE
    co_return PURPLE 
    co_yield PURPLE
    decltype BLUE
    default BLUE
    delete  PURPLE
    do      PURPLE
    dynamic_cast BLUE
    else    PURPLE
    enum     BLUE
    explicit BLUE
    export  PURPLE
    extern  BLUE
    false   BLUE
    for     PURPLE
    friend  BLUE
    goto    PURPLE
    if      PURPLE
    inline  blue
    mutable blue
    namespace blue
    new       PURPLE
    noexcept        BLUE
    not             BLUE
    not_eq          BLUE
    nullptr         BLUE
    operator        BLUE
    or              BLUE
    or_eq           BLUE
    private         BLUE
    protected       BLUE
    public          BLUE
    reflexpr        BLUE
    register            BLUE
    reinterpret_cast    YELLOW 
    requires        PURPLE
    return          purple
    signed          BLUE
    sizeof          BLUE
    std             RED
    static          BLUE
    static_assert   YELLOW
    static_cast     YELLOW
    switch          PURPLE
    synchronized    BLUE
    template        YELLOW
    this            BLUE
    throw           PURPLE
    true            BLUE
    try             PURPLE
    typedef         BLUE
    typeid          blue
    union           BLUE
    unsigned        BLUE
    using           PURPLE
    virtual         BLUE
    volatile        BLUE
    while           PURPLE
REP:
    //  \n  GREY
    /* */   GREY
    "   "   GREEN
    R"  "   GREEN
    '   '   GREEN
    
