.default

KWD:
    await        PURPLE
    break        PURPLE
    case         PURPLE
    catch        PURPLE
    class        BLUE
    const        BLUE
    continue     PURPLE
    debugger     PURPLE
    default      PURPLE
    delete       PURPLE
    do           PURPLE
    else         PURPLE
    enum         PURPLE
    export       PURPLE
    extends      BLUE
    false        BLUE
    finally      PURPLE
    for          PURPLE
    function     BLUE
    if           PURPLE
    implements   PURPLE
    import       PURPLE
    in           PURPLE
    instanceof   PURPLE
    interface    PURPLE
    let          BLUE    
    new          PURPLE
    null         BLUE
    package      PURPLE
    private      BLUE
    protected    BLUE
    public       BLUE
    return       PURPLE
    super        BLUE
    switch       PURPLE
    static       BLUE
    this         BLUE
    throw        PURPLE
    try          PURPLE
    true         BLUE
    typeof       BLUE
    var          BLUE
    void         BLUE
    while        PURPLE
    with         PURPLE
    yield        PURPLE
KWD:
    alignas BLUE
    alignof BLUE
    and     BLUE
    and_eq  BLUE
    asm     PURPLE
    atomic_cancel   BLUE
    atomic_commit   BLUE
    atomic_noexcept BLUE
    auto    BLUE
    bitand  BLUE
    bitor   BLUE
    bool    BLUE
    break   PURPLE
    case    PURPLE
    catch   PURPLE
    char    BLUE
    char8_t  BLUE
    char16_t BLUE
    char32_t BLUE
    class   BLUE
    compl   BLUE
    concept BLUE
    const     BLUE
    consteval BLUE
    constexpr BLUE
    constinit BLUE
    const_cast  BLUE
    continue PURPLE
    co_await PURPLE
    co_return PURPLE 
    co_yield PURPLE
    decltype BLUE
    default BLUE
    delete  PURPLE
    do      PURPLE
    double  BLUE
    dynamic_cast BLUE
    else    PURPLE
    enum     BLUE
    explicit BLUE
    export  PURPLE
    extern  BLUE
    false   BLUE
    float   BLUE
    for     PURPLE
    friend  BLUE
    goto    BLUE
    if      PURPLE
    inline  blue
    int     blue
    long    blue
    mutable blue
    namespace blue
    new       PURPLE
    noexcept        BLUE
    not             BLUE
    not_eq          BLUE
    nullptr         BLUE
    operator        BLUE
    or              BLUE
    or_eq           BLUE
    private         BLUE
    protected       BLUE
    public          BLUE
    reflexpr        BLUE
    register            BLUE
    reinterpret_cast    YELLOW 
    requires        PURPLE
    return          purple
    short           BLUE
    signed          BLUE
    sizeof          BLUE
    static          BLUE
    static_assert   YELLOW
    static_cast     YELLOW
    struct          BLUE
    switch          PURPLE
    synchronized    BLUE
    template        YELLOW
    this            BLUE
    throw           PURPLE
    true            BLUE
    try             PURPLE
    typedef         BLUE
    typeid          blue
    typename        BLUE
    union           BLUE
    unsigned        BLUE
    using           PURPLE
    virtual         BLUE
    void            BLUE
    volatile        BLUE
    while           PURPLE
KWD:
    False      BLUE     
    None       BLUE     
    True       BLUE     
    and        BLUE 
    as         PURPLE 
    assert     PURPLE     
    async      PURPLE     
    await      PURPLE     
    break      PURPLE     
    class      BLUE     
    continue   PURPLE   
    def        BLUE 
    del        PURPLE 
    elif       PURPLE     
    else       PURPLE     
    except     PURPLE     
    finally    PURPLE     
    for        PURPLE 
    from       PURPLE     
    global     BLUE     
    if         PURPLE 
    import     PURPLE     
    in         PURPLE 
    is         BLUE 
    lambda     BLUE     
    nonlocal   BLUE         
    not        BLUE 
    or         BLUE 
    pass       PURPLE     
    raise      PURPLE     
    return     PURPLE     
    try        PURPLE 
    while      PURPLE     
    with       PURPLE     
    yield      PURPLE
REP:
    #       \n      YELLOW
    //       \n     GREY
    /*      */      GREY
    @       \n      BLUE
    '       '       GREEN
    """     """     GREEN
    "       "       GREEN
